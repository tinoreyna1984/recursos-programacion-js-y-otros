Angular - Intermedio
********************

Nivel para la creación de aplicaciones de una sola página (SPA).

Introducción al ruteo en Angular
================================

Forma manual
------------

Crear un archivo de rutas padre:

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { HomePageComponent } from './shared/pages/home-page/home-page.component';
import { AboutPageComponent } from './shared/pages/about-page/about-page.component';
import { ContactPageComponent } from './shared/pages/contact-page/contact-page.component';

const routes: Routes = [
  {
    path: '', // principal
    component: HomePageComponent
  },
  {
    path: 'about',
    component: AboutPageComponent
  },
  {
    path: 'contact',
    component: ContactPageComponent
  },
  {
    path: '**', // cualquier otra dirección redirige a la principal
    redirectTo: ''
  }
];

@NgModule({
  imports: [
    RouterModule.forRoot(routes)
  ],
  exports: [
    RouterModule
  ]
})

export class AppRoutingModule { }


El archivo invocará los componentes definidos en el arreglo de rutas. Luego, se puede usar el objeto de Angular para aprovechar las rutas desde el componente principal app.component.html:

<div class="row mt-4">
  <div class="col-3">
    <shared-sidebar></shared-sidebar>
  </div>
  <div class="col">
    <router-outlet></router-outlet>
  </div>
</div>


Configuración del ruteo por medio de dos directivas: routerLinkActive y routerLinkActiveOptions:

<h2>Países</h2>
<hr>

<ul class="list-group">
  <li routerLink="" routerLinkActive="active" [routerLinkActiveOptions]="{ exact: true }" class="list-group-item">
    Home
  </li>
  <li routerLink="about" routerLinkActive="active" class="list-group-item">
    Acerca de
  </li>
  <li routerLink="contact" routerLinkActive="active" class="list-group-item">
    Contacto
  </li>
</ul>

Rutas hijas con carga perezosa (Lazy Load)
-----------------------------------------

Rutas hijas:

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { ByCapitalPageComponent } from './pages/by-capital-page/by-capital-page.component';
import { ByRegionPageComponent } from './pages/by-region-page/by-region-page.component';
import { ByCountryPageComponent } from './pages/by-country-page/by-country-page.component';
import { CountryPageComponent } from './pages/country-page/country-page.component';

const routes: Routes = [
  {
    path: 'by-capital',
    component: ByCapitalPageComponent,
  },
  {
    path: 'by-country',
    component: ByCountryPageComponent,
  },
  {
    path: 'by-region',
    component: ByRegionPageComponent,
  },
  {
    path: 'by/:id',
    component: CountryPageComponent,
  }
]

@NgModule({
  imports: [
    RouterModule.forChild(routes)
  ],
  exports: [
    RouterModule
  ],
  declarations: [],
  providers: [],
})
export class CountriesRoutingModule { }

Importación en el módulo Countries:

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ByCapitalPageComponent } from './pages/by-capital-page/by-capital-page.component';
import { ByCountryPageComponent } from './pages/by-country-page/by-country-page.component';
import { ByRegionPageComponent } from './pages/by-region-page/by-region-page.component';
import { CountryPageComponent } from './pages/country-page/country-page.component';
import { CountriesRoutingModule } from './countries-routing.module';



@NgModule({
  declarations: [
    ByCapitalPageComponent,
    ByCountryPageComponent,
    ByRegionPageComponent,
    CountryPageComponent
  ],
  imports: [
    CommonModule,
    CountriesRoutingModule
  ]
})
export class CountriesModule { }


Carga perezosa:

En ruta principal:

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { HomePageComponent } from './shared/pages/home-page/home-page.component';
import { AboutPageComponent } from './shared/pages/about-page/about-page.component';
import { ContactPageComponent } from './shared/pages/contact-page/contact-page.component';

const routes: Routes = [
  {
    path: '',
    component: HomePageComponent
  },
  {
    path: 'about',
    component: AboutPageComponent
  },
  {
    path: 'contact',
    component: ContactPageComponent
  },
  {
    path: 'countries',
    loadChildren: () => import('./countries/countries.module').then(m => m.CountriesModule), // lazy load
  },
  {
    path: '**',
    redirectTo: ''
  }
];

@NgModule({
  imports: [
    RouterModule.forRoot(routes)
  ],
  exports: [
    RouterModule
  ]
})

export class AppRoutingModule { }

Aprovechamiento de las rutas:

<h2>Países</h2>
<hr>

<ul class="list-group">
  <li routerLink="" routerLinkActive="active" [routerLinkActiveOptions]="{ exact: true }" class="list-group-item">
    Home
  </li>
  <li routerLink="about" routerLinkActive="active" class="list-group-item">
    Acerca de
  </li>
  <li routerLink="contact" routerLinkActive="active" class="list-group-item">
    Contacto
  </li>
  <li routerLink="countries/by-capital" routerLinkActive="active" class="list-group-item">
    Por capital
  </li>
  <li routerLink="countries/by-country" routerLinkActive="active" class="list-group-item">
    Por país
  </li>
  <li routerLink="countries/by-region" routerLinkActive="active" class="list-group-item">
    Por región
  </li>
</ul>


Manejo de errores (catchError)
==============================

Suponiendo que se necesita resolver los errores en un request a un backend, teniendo el servicio:

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Country } from '../interfaces/country';
import { Observable, of,catchError } from "rxjs";

@Injectable({providedIn: 'root'})
export class CountriesService {

  private apiUrl: string = 'https://restcountries.com/v3.1';

  constructor(private http: HttpClient) { }

  searchCapital(term: string): Observable<Country[]> {
    return this.http.get<Country[]>(`${this.apiUrl}/capital/${term}`);
  }

}

La función searchByCapital debe responder así:

  searchCapital(term: string): Observable<Country[]> {
    return this.http.get<Country[]>(`${this.apiUrl}/capital/${term}`)
    .pipe(
      catchError(() => of([]))
    );
  }

A través de un pipe, se hace una transformación de una respuesta procedente del request indicando la forma en el argumento de catchError.


Generar enlace a página
=======================

1. Crear función desde el servicio:

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Country } from '../interfaces/country';
import { Observable, of, catchError, map } from "rxjs";

@Injectable({providedIn: 'root'})
export class CountriesService {

  private apiUrl: string = 'https://restcountries.com/v3.1';

  constructor(private http: HttpClient) { }

  searchCountryByAlphaCode(alphaCode: string): Observable<Country | null> {
    return this.http.get<Country[]>(`${this.apiUrl}/alpha/${alphaCode}`)
    .pipe(
      map( countries => countries.length > 0 ? countries[0] : null),
      catchError(() => of(null))
    );
  }

  // ...

}

2. Asegurarse de tener la ruta dinámica con la variable a ser usada:

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { ByCapitalPageComponent } from './pages/by-capital-page/by-capital-page.component';
import { ByRegionPageComponent } from './pages/by-region-page/by-region-page.component';
import { ByCountryPageComponent } from './pages/by-country-page/by-country-page.component';
import { CountryPageComponent } from './pages/country-page/country-page.component';

const routes: Routes = [
  // ...
  {
    path: 'by/:id',
    component: CountryPageComponent,
  },
  {
    path: '**',
    redirectTo: 'by-capital'
  }
]

@NgModule({
  imports: [
    RouterModule.forChild(routes)
  ],
  exports: [
    RouterModule
  ],
  declarations: [],
  providers: [],
})
export class CountriesRoutingModule { }

3. Inyectar:

- Una instancia de ActivatedRoute para pasar información al componente.
- El servicio previamente creado.
- Una instancia de Router para redirección en caso de error.

La clase del componente quedaría así:

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { CountriesService } from '../../services/countries.service';
import { switchMap } from 'rxjs';
import { Country } from '../../interfaces/country';

@Component({
  selector: 'app-country-page',
  templateUrl: './country-page.component.html',
  styles: [],
})
export class CountryPageComponent implements OnInit {
  public country?: Country;

  constructor(
    private activatedRoute: ActivatedRoute,
    private countriesService: CountriesService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.activatedRoute.params
      .pipe(
        switchMap( ({id}) => this.countriesService.searchCountryByAlphaCode(id) )
      )
      .subscribe(
        country =>{
          if(!country) return this.router.navigateByUrl('');
          console.log(country)
          return this.country = country;
        }
      )
  }
}

Una vez inyectado el componente de forma apropiada se podrá aprovechar los parámetros obtenidos:

<ng-template #loading>
  <div class="alert alert-info">Espere por favor...</div>
</ng-template>

<div *ngIf="country; else loading">
  <div class="row">
    <div class="col-12">
      <h1>{{ country.name.common }}</h1>
    </div>
  </div>
  <div class="row">
    <div class="col-4">
      <h3>Bandera</h3>
      <img
        class="img-thumbnail"
        [src]="country.flags.svg"
        [alt]="country.name.common"
      />
    </div>
    <div class="col">
      <h3>Información</h3>
      <ul class="list-group">
        <li class="list-group-item">
          <strong>Población: </strong> {{ country.population | number }}
        </li>
        <li class="list-group-item">
          <strong>Código: </strong> {{ country.cca3 }}
        </li>
      </ul>
    </div>
  </div>
</div>

Navegar al enlace creado
------------------------

<div *ngIf="countries.length === 0; else table" class="alert alert-warning text-center">
  No hay países que mostrar.
</div>

<ng-template #table>
  <table class="table table-hover">
    <thead>
      <tr>
        <th>#</th>
        <th>Bandera</th>
        <th>Imagen</th>
        <th>Nombre</th>
        <th>Capital</th>
        <th>Población</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let country of countries; let i = index">
        <td>{{ i + 1 }}</td>
        <td>{{ country.flag }}</td>
        <td>
          <img [src]="country.flags.svg" [alt]="country.name.common" />
        </td>
        <td>
          {{ country.name.common }}
        </td>
        <td>
          {{ country.capital }}
        </td>
        <td>
          {{ country.population | number }}
        </td>
        <td>
          <a [routerLink]="['/countries/by', country.cca3]">Info</a> <---------------------------- usar el routerLink de esta forma
        </td>
      </tr>
    </tbody>
  </table>
</ng-template>


Ruteo en Angular (Angular Router)
=================================

Al crear el proyecto se puede incluir Angular Router para desarrollar las rutas como se vieron en la parte introductoria.

La forma de distribuir las rutas puede operar como sigue:

1. Ruteo principal (el archivo generado app-routing.module.ts):

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [
  {
    path: '',
    loadChildren: () => import('./products/products.module').then( m => m.ProductsModule ),
  }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

2. Rutas hijas:

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

import { BasicsPageComponent } from './pages/basics-page/basics-page.component';
import { NumbersPageComponent } from './pages/numbers-page/numbers-page.component';
import { OrderComponent } from './pages/order/order.component';
import { UncommonPageComponent } from './pages/uncommon-page/uncommon-page.component';

const routes: Routes = [
  {
    path: '',
    component: BasicsPageComponent
  },
  {
    path: 'numbers',
    component: NumbersPageComponent
  },
  {
    path: 'uncommon',
    component: UncommonPageComponent
  },
  {
    path: 'custom',
    component: OrderComponent
  },
  {
    path: '**',
    redirectTo: ''
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class ProductsRoutingModule { }

ProductsRoutingModule debe ser llamada dentro de ProductsModule:

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { ProductsRoutingModule } from './products-routing.module';
import { BasicsPageComponent } from './pages/basics-page/basics-page.component';
import { NumbersPageComponent } from './pages/numbers-page/numbers-page.component';
import { UncommonPageComponent } from './pages/uncommon-page/uncommon-page.component';
import { PrimeNgModule } from '../prime-ng/prime-ng.module';
import { OrderComponent } from './pages/order/order.component';

import { CanFlyPipe } from './pipes/can-fly.pipe';
import { ToggleCasePipe } from './pipes/toggle-case.pipe';
import { SortByPipe } from './pipes/sort-by.pipe';


@NgModule({
  declarations: [
    BasicsPageComponent,
    NumbersPageComponent,
    UncommonPageComponent,
    OrderComponent,

    // Pipes
    CanFlyPipe,
    ToggleCasePipe,
    SortByPipe,
  ],
  imports: [
    CommonModule,
    PrimeNgModule,
    ProductsRoutingModule,
  ]
})
export class ProductsModule { }


Ruteo Avanzado: rutas padres e hijas y carga floja (lazy load)
==============================================================

Rutas principales
-----------------

app-routing.module.ts:

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { Error404PageComponent } from './shared/pages/error404-page/error404-page.component';

// rutas
const routes: Routes = [
  {
    path: 'auth',
    loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule),
  },
  {
    path: 'heroes',
    loadChildren: () => import('./heroes/heroes.module').then(m => m.HeroesModule),
  },
  {
    path: '404',
    component: Error404PageComponent
  },
  {
    path: '',
    redirectTo: 'heroes',
    pathMatch: 'full'
  },
  {
    path: '**',
    redirectTo: '404'
  }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

Estas rutas se llaman desde el componente principal:

<!-- Home -->
<router-outlet></router-outlet>

Notar que cualquier ruta desconocida redirige a la que muestra error 404 y la raíz va a /heroes

Asimismo, se debe asegurar que en app.module.ts se llame al ruteador principal AppRoutingModule:

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { SharedModule } from './shared/shared.module';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    SharedModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


Rutas hija del módulo 'auth'
----------------------------

Se definen las rutas en el ruteador hijo:

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { LoginPageComponent } from './pages/login-page/login-page.component';
import { RegisterPageComponent } from './pages/register-page/register-page.component';

const routes: Routes = [
  {
    path: '',
    component: LayoutPageComponent,
    children: [
      {
        path: 'login',
        component: LoginPageComponent
      },
      {
        path: 'new-account',
        component: RegisterPageComponent
      },
      {
        path: '**',
        redirectTo: 'login'
      },
    ]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class AuthRoutingModule { }

En este caso, la raíz para las rutas hijas es /auth, de modo que deben accederse a las rutas /auth/login y /auth/new-account y, si la dirección es /auth u otra compuesta desde la raíz, será redirigida a 'login'.

Los componentes hijos se alojan en el padre LayoutPageComponent:

<p>Auth</p>

<router-outlet></router-outlet>


Dicho ruteador debe importarse del módulo auth asociado:

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AuthRoutingModule } from './auth-routing.module';
import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { LoginPageComponent } from './pages/login-page/login-page.component';
import { RegisterPageComponent } from './pages/register-page/register-page.component';

@NgModule({
  declarations: [
    LayoutPageComponent,
    LoginPageComponent,
    RegisterPageComponent
  ],
  imports: [
    CommonModule,
    AuthRoutingModule
  ]
})
export class AuthModule { }



Rutas hija del módulo 'heroes'
------------------------------

Se definen las rutas en el ruteador hijo:

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { NewPageComponent } from './pages/new-page/new-page.component';
import { HeroPageComponent } from './pages/hero-page/hero-page.component';
import { ListPageComponent } from './pages/list-page/list-page.component';
import { SearchPageComponent } from './pages/search-page/search-page.component';

const routes: Routes = [
  {
    path: '',
    component: LayoutPageComponent,
    children: [
      {
        path: 'new-hero',
        component: NewPageComponent
      },
      {
        path: 'search',
        component: SearchPageComponent
      },
      {
        path: 'edit/:id',
        component: NewPageComponent
      },
      {
        path: 'list',
        component: ListPageComponent
      },
      {
        path: ':id',
        component: HeroPageComponent
      },
      {
        path: '**',
        redirectTo: 'list'
      },
    ]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class HeroesRoutingModule { }


En este caso, la raíz para las rutas hijas es /heroes, lo que las demás rutas vayan precedidas de dicha raíz y, si la dirección es /heroes u otra compuesta desde la raíz, será redirigida a 'list'.

Los componentes hijos se alojan en el padre LayoutPageComponent:

<p>Heroes</p>

<router-outlet></router-outlet>


Dicho ruteador debe importarse del módulo heroes asociado:

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { HeroesRoutingModule } from './heroes-routing.module';
import { HeroPageComponent } from './pages/hero-page/hero-page.component';
import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { ListPageComponent } from './pages/list-page/list-page.component';
import { NewPageComponent } from './pages/new-page/new-page.component';
import { SearchPageComponent } from './pages/search-page/search-page.component';


@NgModule({
  declarations: [
    HeroPageComponent,
    LayoutPageComponent,
    ListPageComponent,
    NewPageComponent,
    SearchPageComponent
  ],
  imports: [
    CommonModule,
    HeroesRoutingModule
  ]
})
export class HeroesModule { }


Pipes
=====

Pipes básicos
-------------

<p-panel header="Pipes básicos" class="p-1">
  <p>
    Pipes incluídos en Angular - Usualmente en el Common Module
  </p>
</p-panel>


<div class="grid">

  <div class="col-12 md:col-4">
    <p-card header="uppercase">
      {{ nameLower | uppercase }}
    </p-card>
  </div>

  <div class="col-12 md:col-4">
    <p-card header="lowercase">
      {{ nameUpper | lowercase }}
    </p-card>
  </div>

  <div class="col-12 md:col-4">
    <p-card header="titlecase">
      {{ fullName | titlecase }}
    </p-card>
  </div>


  <div class="col-12 md:col-6">
    <p-card header="titlecase">

      <ol>
        <li> fecha </li>
        <li> fecha | date </li>
        <li> fecha | date:'short' </li>
        <li> fecha | date:'long' </li>
        <li> fecha | date:'MMMM' </li>
        <li> fecha | date:'MMMM dd, yyyy' </li>
      </ol>

      <hr>
      <ol>
        <li> fecha | date:'long':'GMT-6' </li>
        <li> fecha | date:'long':'GMT-4' </li>
        <li> fecha | date:'long':'':'es-HN' </li>
        <li> fecha | date:'long':'':'en-US' </li>
        <li> fecha | date:'long':'':'fr-CA' </li>
      </ol>

    </p-card>
  </div>

  <div class="col-12 md:col-6">
    <p-card header="titlecase">

      <ol>
        <li> {{ customDate }} </li>
        <li> {{ customDate | date }} </li>
        <li> {{ customDate | date:'short' }} </li>
        <li> {{ customDate | date:'long' }} </li>
        <li> {{ customDate | date:'MMMM' }} </li>
        <li> {{ customDate | date:'MMMM dd, yyyy' }} </li>
      </ol>

      <hr>
      <ol>
        <li> {{ customDate | date:'long':'GMT-6' }} </li>
        <li> {{ customDate | date:'long':'GMT-4' }} </li>
        <li> {{ customDate | date:'long':'':'es-HN' }} </li>
        <li> {{ customDate | date:'long':'':'en-US' }} </li>
        <li> {{ customDate | date:'long':'':'fr-CA' }} </li>
      </ol>

    </p-card>
  </div>



</div>


Pipes personalizados
--------------------

Ejemplo:

import { Pipe, PipeTransform } from "@angular/core";

// fernando | toggleCase  = 'FERNANDO'
// FERNANDO | toggleCase  = 'fernando'

@Pipe({
  name: 'toggleCase'
})
export class ToggleCasePipe implements PipeTransform {

  transform( value: string, toUpper: boolean = false ): string {

    return ( toUpper )
      ? value.toUpperCase()
      : value.toLowerCase();
  }

}

Uso:

<p-panel header="Pipes personalizados" class="p-1">
  <p>
    Pipes personalizados - creados por {{ 'nosotros' | toggleCase:isUpperCase }}
  </p>
</p-panel>


Angular Material
================

Instalación (Angular CLI)
-------------------------

ng add @angular/material


Documentación: https://material.angular.io/


Formularios Reactivos
=====================

En HTML:

        <form class="grid" [formGroup]="heroForm" (ngSubmit)="onSubmit()">
          <mat-form-field class="col-12 sm:col-6">
            <mat-label>Superhéroe</mat-label>
            <input type="text" matInput required formControlName="superhero" />
          </mat-form-field>
          <mat-form-field class="col-12 sm:col-6">
            <mat-label>Alter ego</mat-label>
            <input type="text" matInput required formControlName="alter_ego" />
          </mat-form-field>
          <mat-form-field class="col-12">
            <mat-label>Primera aparición</mat-label>
            <input type="text" matInput required formControlName="first_appearance" />
          </mat-form-field>
          <mat-form-field class="col-12">
            <mat-label>Personajes</mat-label>
            <input type="text" matInput required formControlName="characters" />
          </mat-form-field>
          <mat-form-field class="col-12">
            <mat-label>Creador</mat-label>
            <mat-select required="" formControlName="publisher">
              <mat-option
                *ngFor="let publisher of publishers"
                [value]="publisher.id"
              >
                {{ publisher.desc }}
              </mat-option>
            </mat-select>
          </mat-form-field>

          <mat-form-field class="col-12">
            <mat-label>Imagen alternativa</mat-label>
            <input type="text" matInput required formControlName="alt_img" />
          </mat-form-field>
        </form>
		
En la clase:

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormControl, FormGroup } from '@angular/forms';
import { switchMap } from 'rxjs';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatDialog } from '@angular/material/dialog';
import { Hero, Publisher } from '../../interfaces/heroes.interface';
import { HeroesService } from '../../services/heroes.service';
import { ConfirmDialogComponent } from '../../components/confirm-dialog/confirm-dialog.component';

@Component({
  selector: 'app-new-page',
  templateUrl: './new-page.component.html',
  styles: [],
})
export class NewPageComponent implements OnInit {
  // formulario reactivo
  public heroForm = new FormGroup({
    id: new FormControl<string>(''),
    superhero: new FormControl<string>('', { nonNullable: true }),
    publisher: new FormControl<Publisher>(Publisher.DCComics),
    alter_ego: new FormControl(''),
    first_appearance: new FormControl(''),
    characters: new FormControl(''),
    alt_img: new FormControl(''),
  });

  public publishers = [
    {
      id: 'DC Comics',
      desc: 'DC - Comics',
    },
    {
      id: 'Marvel Comics',
      desc: 'Marvel - Comics',
    },
  ];

  constructor(
    private heroesService: HeroesService,
    private activatedRoute: ActivatedRoute,
    private router: Router,
    private snackBar: MatSnackBar,
    private dialog: MatDialog,
  ) {}

  ngOnInit(): void {
    if (!this.router.url.includes('edit')) return;

    this.activatedRoute.params
      .pipe(switchMap(({ id }) => this.heroesService.getHeroById(id)))
      .subscribe((hero) => {
        if (!hero) return this.router.navigateByUrl('/');
        this.heroForm.reset(hero);
        return;
      });
  }

  get currentHero(): Hero {
    const hero: Hero = this.heroForm.value as Hero;
    return hero;
  }

  onSubmit(): void {
    if (this.heroForm.invalid) return;

    if (this.currentHero.id) {
      this.heroesService.updateHero(this.currentHero).subscribe((hero) => {
        this.showSnackbar(`${hero.superhero} actualizado`);
      });
      return;
    }
    this.heroesService.addHero(this.currentHero).subscribe((hero) => {
      this.router.navigate(['/heroes/edit', hero.id]);
      this.showSnackbar(`${hero.superhero} creado`);
    });
  }

  onDeleteHero():void {
    if(!this.currentHero.id) throw new Error('Se requiere ID de héroe');

    const dialogRef = this.dialog.open(ConfirmDialogComponent, {
      data: this.heroForm.value,
    });

    dialogRef.afterClosed().subscribe(result => {
      if(!result) return;

      this.heroesService.deleteHeroById(this.currentHero.id)
        .subscribe(
          wasDeleted => {
            if(wasDeleted)
              this.router.navigate(['/heroes']);
          }
        );
    });
  }

  showSnackbar(message: string): void {
    this.snackBar.open(message, 'done', {
      duration: 2500,
    });
  }
}

Objeto de confirmación de dialog
--------------------------------

HTML:

<h1 mat-dialog-title>Eliminar a {{data.superhero}}</h1>
<div mat-dialog-content>
  <p>¿Estás seguro? No se podrá deshacer...</p>
</div>
<div mat-dialog-actions>
  <button mat-button (click)="onNoClick()">No</button>
  <button mat-button (click)="onConfirm()" cdkFocusInitial>Sí</button>
</div>


Clase:

import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { Hero } from '../../interfaces/heroes.interface';

@Component({
  selector: 'app-confirm-dialog',
  templateUrl: './confirm-dialog.component.html',
  styles: [
  ]
})
export class ConfirmDialogComponent {
  constructor(
    public dialogRef: MatDialogRef<ConfirmDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: Hero,
  ) {}

  onNoClick(): void {
    this.dialogRef.close(false);
  }

  onConfirm(): void {
    console.log("click!");
    this.dialogRef.close(true);
  }
}


Protección de rutas (Angular Guards)
====================================

Los guards de Angular son justamente eso: guardias. O sea, funciones que protegen las rutas según elementos que rigen el acceso de las mismas.

Archivo de guards
-----------------

auth.guard.ts:

// Angular 16+ - no se crea una clase para los guards

import {
  ActivatedRouteSnapshot,
  CanActivateFn,
  CanMatchFn,
  Route,
  RouterStateSnapshot,
  UrlSegment,
} from '@angular/router';

/* No hay necesidad de crear una clase, simplemente definiendo una función flecha y exportándola
podemos utilizar sus funcionalidades de guard en el app-routing */
export const canActivateGuard: CanActivateFn = ( //Hay que tener en cuenta el tipado CanActiveFn
  route: ActivatedRouteSnapshot,
  state: RouterStateSnapshot
) => {
  console.log('CanActivate');
  console.log({ route, state });

  return false;
};

export const canMatchGuard: CanMatchFn = ( //Tipado CanMatchFn
  route: Route,
  segments: UrlSegment[]
) => {
  console.log('CanMatch');
  console.log({ route, segments });

  return false;
};

Aplicación en rutas
-------------------

// rutas
const routes: Routes = [
  {
    path: 'auth',
    loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule),
  },
  {
    path: 'heroes',
    loadChildren: () => import('./heroes/heroes.module').then(m => m.HeroesModule),
    canActivate: [canActivateGuard], //Anclamos la función del canActive
    canMatch: [canMatchGuard], //Anclamos la función del canMatch
  },
  {
    path: '404',
    component: Error404PageComponent
  },
  {
    path: '',
    redirectTo: 'heroes',
    pathMatch: 'full'
  },
  {
    path: '**',
    redirectTo: '404'
  }
];




