React Native (RN) + TypeScript 2024
***********************************

Repaso de React
===============

Exportación de barril
---------------------

./directorio/index.ts:

/** Archivo de barril: exportaciones de componentes en un archivo */

export * from './BasicFunctions';
export * from './BasicTypes';
export * from './ObjectLiterals';

Usar el directorio anterior:

import { BasicTypes, BasicFunctions, ObjectLiterals } from "./directorio"

Tipado de TypeScript
--------------------

Débil (tipo JavaScript):

const algo = "Tino";
const algo02 = 1340;

Fuerte:

const algo: string = "Tino";
const algo02: string = 1340; // error en TypeScript
const algo03: string[] = "Pepe"; // error en TypeScript
const algo04: any = 12; // cualquier tipo de dato como en el tipado débil

Interfaces y object literals
----------------------------

interface Person {
  firstName: string;
  lastName: string;
  age: number;
  address: Address;
  isAlive?: boolean;
}

interface Address {
  country: string;
  houseNo: number;
}

export const ObjectLiterals = () => {
  const person: Person = {
    age: 37,
    firstName: "Fernando",
    lastName: "Herrera",
    address: {
      country: "Canada",
      houseNo: 615,
    },
  };

  return (
    <>
      <h3>Objetos literales</h3>
      <pre>{JSON.stringify(person, null, 2)}</pre>
    </>
  );
};

Hooks
-----

useState:

const [count, setCount] = useState<number>(10); // se define el tipo de retorno en <number>
const increaseBy = (value: number) => {
setCount(count + value);
};
<button onClick={() => increaseBy(+1)}>+1</button>

Custom hook:

Ej., useCounter:

// definición
import { useState } from "react";

interface Options {
  initialValue?: number;
}

export const useCounter = ({ initialValue = 0 }: Options) => {
  const [count, setCount] = useState<number>(initialValue);

  const increaseBy = (value: number) => {
    const newValue = count + value;
    if (newValue < 0) return;

    setCount(count + value);
  };

  return {
    // Properties
    count,

    // Methods
    increaseBy,
  };
};


// aplicación
const { count, increaseBy } = useCounter({
	initialValue: 5,
});

<button onClick={() => increaseBy(+1)}>+1</button>

Zustand
-------

Gestor de estados alternativo a Redux y RTK.

Pasos:

1. Crear el store:

Ej. auth.store.ts:

import { create } from "zustand";

interface AuthState {
  status: "authenticated" | "unauthenticated" | "checking";
  token?: string;
  user?: {
    name: string;
    email: string;
  };

  login: (email: string, password: string) => void;
  logout: () => void;
}

export const useAuthStore = create<AuthState>()((set) => ({ // se crea un hook del store con un callback que tiene como parámetro un método llamado set
  status: "checking",
  token: undefined,
  user: undefined,

  login: (email: string, password: string) => {
    set({
      status: "authenticated",
      token: "ABC123",
      user: {
        name: "John Doe",
        email: email,
      },
    });
  },

  logout: () => {
    set({
      status: "unauthenticated",
      token: undefined,
      user: undefined,
    });
  },
}));

2. Importarlo en el componente:

import { useEffect } from "react";
import { useAuthStore } from "../store/auth.store"; // importa el store y su respectivo hook

export const LoginPage = () => {
  const authStatus = useAuthStore((state) => state.status); // se usan los atributos y métodos cuyo cambio es controlado desde el store
  const user = useAuthStore((state) => state.user);
  const login = useAuthStore((state) => state.login);
  const logout = useAuthStore((state) => state.logout);

  useEffect(() => {
    setTimeout(() => {
      logout();
    }, 1500);
  }, []);

  if (authStatus === "checking") {
    return <h3>Loading...</h3>;
  }

  return (
    <>
      <h3>Login Page</h3>

      {authStatus === "authenticated" ? (
        <div>Autenticado como: {JSON.stringify(user, null, 2)} </div>
      ) : (
        <div>No Autenticado</div>
      )}

      {authStatus === "authenticated" ? (
        <button onClick={logout}>Logout</button>
      ) : (
        <button onClick={() => login("fernando@googe.com", "123")}>
          Login
        </button>
      )}
    </>
  );
};

Se puede notar que la configuración y uso de Zustand simplifica y centraliza toda la gestión que obedece a mayor código como en el caso de Redux.

React Hook Form
===============

Instalación
-----------

npm i react-hook-form

Uso
---

1. Usar el hook useForm:

import { useForm } from "react-hook-form";

type FormInputs = {
  email: string;
  password: string;
};

export const FormsPage = () => {
  const { register, handleSubmit, formState, watch } = useForm<FormInputs>({
    defaultValues: {
      email: "fernando@google.com",
      password: "Abc123",
    },
  });

2. Definir el método de envío:


  const onSubmit = (myForm: FormInputs) => {
    console.log({ myForm });
  };

3. De la desestructuración del hook useForm:

- register se emplea en los inputs.
- handleSubmit se emplea para el atributo onSubmit del formulario.
- watch permite visualizar el valor del atributo enviado.
- formState es el objeto que contiene los datos enviados desde el formulario.


  console.log(watch("email"));

  return (
    <>
      <form onSubmit={handleSubmit(onSubmit)}>
        <h3>Formularios</h3>

        <div style={{ display: "flex", flexDirection: "column" }}>
          <input
            type="text"
            placeholder="Email"
            {...register("email", { required: true })}
          />

          <input type="text" placeholder="password" {...register("password")} />

          <button type="submit">Ingresar</button>
        </div>
      </form>

      <pre>{JSON.stringify(formState, null, 2)}</pre>
    </>
  );


Uso de RN CLI
=============



Componentes
===========

A diferencia de HTML (que usa React), en React Native se tienen principalmente los siguientes componentes:

* View
* Text
* ScrollView
* FlatList
* TextInput
* StyleSheet
* Image
* Button
* TouchableOpacity (alternativa a Button)
* Switch (botón de interrupción)
* ActivityIndicator
* StatusBar
* Modal

Todos los componentes están en su documentación: https://reactnative.dev/docs/components-and-apis

Ruteo
=====

Ver React Navigation.




