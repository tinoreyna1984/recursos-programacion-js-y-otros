HTML
****

Estructuración con HTML
=======================

Uso de section: agrupa headings como el <h1>
Uso del main: es la sección más importante de la página. Puede agrupar otros <section>

Formularios
===========

Uso de fieldset + legend
------------------------

<form action="">
  <fieldset>
    <legend>Título</legend>
    <div>
      <label for="campo01">Etiqueta01: </label>
      <input type="text|email|number|..." name="campo01" id="campo01" placeholder="campo01" />
    </div>
    <div>
      <label for="campo02">Etiqueta02: </label>
      <input type="text|email|number|..." name="campo02" id="campo02" placeholder="campo02" />
    </div>
    ...
    <div>
      <label for="campoN">EtiquetaN: </label>
      <input type="text|email|number|..." name="campoN" id="campoN" placeholder="campoN" />
    </div>
    <div>
      <button type="submit">Enviar</button>
    </div>
  </fieldset>
</form>

fieldset: agrupa elementos asociados en un formulario.
legend: es el caption o título que identifica visiblemente a fieldset.

datalist
--------

<form action="/action_page.php" method="get">
  <label for="browser">Choose your browser from the list:</label>
  <input list="browsers" name="browser" id="browser">
  <datalist id="browsers">
    <option value="Edge">
    <option value="Firefox">
    <option value="Chrome">
    <option value="Opera">
    <option value="Safari">
  </datalist>
  <input type="submit">
</form>

Sirve para agrupar elementos predeterminados para una búsqueda efectuada desde un input.


Video en HTML5
==============

<video muted autoplay loop>
	<source type="video/mp4" src="video/concierto.mp4" />
	<source type="video/ogg" src="video/concierto.ogg" />
	<source type="video/webm" src="video/concierto.webm" />
</video>

Atributos generales
-------------------

muted: sin sonido
autoplay: se reproduce al cargar la página
loop: reinicia su reproducción después de finalizar

En cuanto a source, se debe emplear un tipo de video para cada navegador. El orden de tipos de detección es mp4, ogg y webm.


CSS
***

Hack de ajuste de dimensiones en rem con html y body
====================================================

/* hack de ajuste de dimensiones en rem con html y body (para lograr: 1rem = 10px) */
html {
    font-size: 62.5%; /* font-size base a nivel de html */
}
body {
    font-size: 16px; /* font-size base a nivel del documento */
}

Esto asegura una relación práctica: 1rem = 10px (sobre la base de 16px en el documento como se indica).
Las demás medidas de los elementos en pantalla será en rem.

Selectores
==========

Elemento
--------

p {
  color: blue;
}

Clase
-----

.cliente {
  color: blue;
}

ID
--

#cliente {
  color: blue;
}

Atributo
--------

[src="logo.jpg"]{
  color: blue;
}

Combinación de descendiente (clases anidadas)
---------------------------------------------

.cliente .nombre{
  color: blue;
}

Aplica para elementos, clases y ID donde todo elemento hijo (y sus descendientes) serán afectados por los atributos definidos.
En este caso, todos los elementos de la clase nombre (y sus descendientes) tendrán el color de letra azul.

Todos los hijos
---------------

.cliente > p{
  color: blue;
}

Aplica para elementos, clases y ID donde todo elemento hijo (excepto sus descendientes) serán afectados por los atributos definidos.
En este caso, todos los elementos p (excepto sus descendientes) tendrán el color de letra azul.


Especificidad en CSS
====================

Es la característica por la cual CSS define los atributos de un elemento o clase.
Hay varios tipos:

Por orden de definición
-----------------------

p {
 color: red;
}

p {
 color: green; /* el navegador usará este atributo e ignorará el anterior */
}

Por caso particular
-------------------

p {
 color: red; /* todos los párrafos tendrán este color */
}

p.cliente {
 color: green; /* los párrafos de la clase cliente tendrán este color */
}

p#parrafo {
 color: blue; /* solo el párrafo con el ID "parrafo" tendrá este color */
}

A la fuerza
-----------

p#parrafo {
 color: blue; /* solo el párrafo con el ID "parrafo" tendrá este color */
}

p {
 color: red!important; /* todos los párrafos tendrán este color y anulará la especificidad del párrafo con ID "parrafo" */
}

Manejo avanzado de selectores
=============================

Lista general: https://www.w3schools.com/cssref/css_selectors.php

Algunos ejemplos
----------------

Relación atributo:valor:

[class*="contenedor"] {
    max-width: 120rem;
    margin: 0 auto;
    width: 95%;
}

Aplica para todos los elementos que llaman a una clase que contenga la palabra "contenedor".

[target]{
    margin: 0 auto;
}

Aplica para todos los elementos que tengan atributo "target".

[target="_blank"]{
    margin: 0 auto;
}

Aplica para todos los elementos que tengan atributo "target" y su valor sea "_blank".

a[href*="w3schools"]{
    margin: 0 auto;
}

Aplica para todos los enlaces que cuyo atributo "href" sea "w3schools".


Pseudoclase
===========

:pseudoclase{
  /* lista de atributos */
}

Ej:

a:hover{ /* hover es la pseudoclase */
  color: yellow;
}

:root{
  --blanco: #ffffff;
  --oscuro: #212121;
  --primario: #ffc107;
  --secundario: #0097a7;
  --gris: #757575;
}

/* Uso la instancia de la clase */
.campo:nth-child(3){
  grid-column: 1 / 3;
}

Pseudoclase para hallar elemento específico de un conjunto de elementos
=======================================================================

Primer elemento a nivel de hijo
-------------------------------

.campo:first-child{
  color: red;
}

Primer elemento a nivel de tipo
-------------------------------

.campo:first-of-type{
  color: red;
}


Último elemento a nivel de hijo
-------------------------------

.campo:last-child{
  color: blue;
}

Último elemento a nivel de tipo
-------------------------------

.campo:last-of-type{
  color: blue;
}

Cualquier elemento a nivel de hijo
----------------------------------
.campo:nth-child(3) { /* el tercer elemento a nivel de hijos */
  color: brown;
}


Atributos personalizados
========================

--nombre-atributo: valor

Estos se usan con la función var:

.navegacion-principal{
    background-color: var(--secundario);
}

Formas de display
=================

display: block
--------------

Es el default que usan los elementos al llenar el documento web. Posiciona los elementos uno bajo el otro conforme van siendo añadidos.

display: inline
---------------

Es el que ocurre en bloques tales como la barra de navegación. Posiciona los elementos uno a la derecha del otro a medida que van siendo añadidos.


display: flex (Flexbox)
-----------------------

Es el display unidimensional que puede trabajarse a nivel de fila o columna.
La orientación por default es fila (row).


display: grid (CSS Grid)
------------------------

Es el display de las dos dimensiones en simultáneo que permite a los elementos ocupar un área definida.

Animaciones CSS
===============



Responsive web design
=====================

Media queries
-------------

.navegacion-principal{
    display: flex;
    flex-direction: column;
}

@media(min-width: 768px){
    .navegacion-principal{
        flex-direction: row;
        justify-content: space-between;
    }
}

Enfoques
--------

Mobile first
------------

Comienza por un tamaño pequeño (orientado al dispositivo móvil);

Por tanto, se aplica el media query del ancho mínimo cuando la resolución es mayor a la de un dispositivo móvil (móvil, tablet, etcétera).

Ejemplo:

.navegacion-principal{
    display: flex;
    flex-direction: column;
}

@media(min-width: 768px){
    .navegacion-principal{
        flex-direction: row;
        justify-content: space-between;
    }
}

En tal sentido, se prefiere usar el media query basado en el ancho mínimo de pantalla.

Los media queries empleados deben hacerse desde el valor min-width más pequeño al más grande.


@media(min-width: 375px){
    /* ... */
}

@media(min-width: 768px){
    /* ... */
}

@media(min-width: 992px){
    /* ... */
}


Desktop first
-------------

Comienza por un tamaño grande (orientado a la PC de escritorio);

Por tanto, se aplica el media query del ancho mínimo cuando la resolución es menor a la de una computadora de escritorio (desktop, laptop, con pantalla 4K, etcétera).

Ejemplo:

.navegacion-principal{
    display: flex;
    flex-direction: column;
}

@media(max-width: 992px){
    .navegacion-principal{
        flex-direction: row;
        justify-content: space-between;
    }
}

En tal sentido, se prefiere usar el media query basado en el ancho máximo de pantalla.

Los media queries empleados deben hacerse desde el valor max-width más grande al más pequeño.

@media(max-width: 992px){
    /* ... */
}

@media(max-width: 768px){
    /* ... */
}

@media(max-width: 375px){
    /* ... */
}

Consideraciones de los enfoques
-------------------------------

* Tomar solo uno de los dos enfoques.
* Respetar el diseño en maqueta.

Tamaños estándar para media queries
-----------------------------------

https://css-tricks.com/snippets/css/media-queries-for-standard-devices/


Imagen responsiva
-----------------

img {
    max-width: 100%;
    width: 100%;
    height: auto;
    display: block;
}

CSS Box-model (modelo de cajas CSS)
===================================

Es una cualidad de los elementos que siguen la directiva:

html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

Posicionamiento de elementos
============================

Por default, la posición es estática, o sea: position: static.

Si se desea cambiar la posición sin afectar el layout que lo contiene, se aplica position: relative
En caso contrario, se aplica position: absolute


Flexbox
=======

Es la metodología de agrupamiento de elementos unidireccional, trabajado por fila o por columna.
Es invocado desde el elemento padre, el cual alberga elementos hijo que son afectados por el criterio de ordenamiento.

flex-direction: row (por defecto)
---------------------------------

display: flex;
align-items: center;     /* alínea verticalmente */
justify-content: center; /* alínea horizontalmente */

flex-direction: column
----------------------

display: flex;
flex-direction: column;
align-items: center;      /* alínea horizontalmente */
justify-content: center;  /* alínea verticalmente */

Variantes de los ordenamientos anteriores
-----------------------------------------

flex-direction: row-reverse;
flex-direction: column-reverse;

Invierte el orden de los elementos (comienza por el último y termina por el primero), sea en fila o columna.

flex-basis
----------

Establece una longitud inicial de cada elemento hijo que pertenece a un contenedor flex.
* Requiere que el contenedor padre tenga "display: flex",
* No es lo mismo que aplicar width o height del elemento. Es la longitud interna inicial (ancho o alto).

CSS:

#main {
  width: 300px;
  height: 100px;
  border: 1px solid #c3c3c3;
  display: flex;
  flex-direction: column;
}

#main div {
  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: 50px;
}

#main div:nth-of-type(2) {
  flex-basis: 100px; /* solo aplica al segundo elemento hijo */
}

HTML:

<div id="main">
  <div style="background-color:coral;">50px</div>
  <div style="background-color:lightblue;">100px</div>
  <div style="background-color:khaki;">50px</div>
  <div style="background-color:pink;">50px</div>
  <div style="background-color:lightgrey;">50px</div>
</div>

flex-wrap
---------

Permite ajustar la agrupación de elementos al ancho del contenedor.

Puede tener los siguientes valores: nowrap (no hay ajuste, valor por defecto), wrap (ajusta el contenido), wrap-reverse (ajusta y cambia el orden de colocación de los elementos).

flex-wrap: wrap;


flex-grow
---------

Es el factor de crecimiento de cada elemento hijo en función a la dirección de crecimiento indicada en el elemento contenedor padre (flex-direction: row o column).

HTML:

<div id="content">
  <div class="box" style="background-color:red;">A</div>
  <div class="box" style="background-color:lightblue;">B</div>
  <div class="box" style="background-color:yellow;">C</div>
  <div class="box1" style="background-color:brown;">D</div>
  <div class="box1" style="background-color:lightgreen;">E</div>
  <div class="box" style="background-color:brown;">F</div>
</div>

CSS:

#content {
  -ms-box-orient: horizontal;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -moz-flex;
  display: -webkit-flex;
  display: flex;

  -webkit-justify-content: space-around;
  justify-content: space-around;
  -webkit-flex-flow: row wrap;
  flex-flow: row wrap;
  -webkit-align-items: stretch;
  align-items: stretch;
}

.box {
  flex-grow: 1;
  border: 3px solid rgba(0,0,0,.2);
}

.box1 {
  flex-grow: 2;
  border: 3px solid rgba(0,0,0,.2);
}

Notar la afectación de los elementos según las clases box y box1, con factores de crecimiento 1 y 2, respectivamente. Los anchos (debido a la dirección de flex, que es row por defecto) son diferentes. La clase 2 da mayor ancho que la clase 1.

flex-shrink
-----------

Contrario a flex-grow, flex-shrink establece el factor de contracción de cada elemento hijo en función a la dirección de crecimiento indicada en el elemento contenedor padre (flex-direction: row o column).

HTML

<div id="content">
  <div class="box" style="background-color:red;">A</div>
  <div class="box" style="background-color:lightblue;">B</div>
  <div class="box" style="background-color:yellow;">C</div>
  <div class="box1" style="background-color:brown;">D</div>
  <div class="box1" style="background-color:lightgreen;">E</div>
</div>


CSS

#content {
  display: flex;
  width: 500px;
}

#content div {
  flex-basis: 120px;
  border: 3px solid rgba(0,0,0,.2);
}

.box {
  flex-shrink: 1;
}

.box1 {
  flex-shrink: 2;
}

flex (como atributo)
--------------------

Aplicado a cada elemento hijo de un contenedor Flexbox, resume los atributos:
* flex-grow
* flex-shrink
* flex-basis
en ese orden.

Ejemplo:

.box {
  flex-grow: 1;
  flex-shrink: 1;
  flex-basis: 33.3%;
}

Lo indicado en box equivale a:

.box {
  flex: 1 1 33.3%;
}

Los valores por defecto son:

.box {
  flex: 1 1 0%; /* flex-grow: 1, flex-shrink: 1 y flex-basis: 0%; */
}


CSS Grid
========

Es la metodología de agrupamiento de elementos que trabaja simultáneamente filas y columnas en áreas distribuidas.
Es invocado desde el elemento padre, el cual alberga elementos hijo que son afectados por el criterio de ordenamiento.


Términos principales en CSS Grid
--------------------------------

display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 2rem;

display: grid genera el agrupamiento del CSS Grid.
grid-template-columns: crea columnas. También hay un atributo análogo para filas, grid-template-rows.
gap: separación de los elementos a nivel de filas y columnas. Equivale a resumir column-gap y row-gap con el mismo valor.


grid-template-columns y grid-template-rows
------------------------------------------

Son propiedades para definir columnas y filas del contenedor Grid:

/* a nivel de columna */
display: grid;
grid-template-columns: 33.3% 33.3% 33.3%;
display: grid;
grid-template-columns: repeat(2, 1fr);

/* a nivel de fila */
display: grid;
grid-template-rows: 33.3% 33.3% 33.3%;
display: grid;
grid-template-rows: repeat(2, 1fr);


column-span y row-span
----------------------

El término span ayuda a extender el elemento en todas las regiones indicadas (fila o columna).

Si se tiene:

.box {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 1fr);
}

Un elemento de esa caja puede tener:

.box:nth-child(3) {
	grid-column: 2 / 4;
	/*
	que equivale a:
	grid-column-start: 2;
	grid-column-end: 4;
	o sea: grid-column: grid-column-start / grid-column-end;
	*/
}

o:

.box:nth-child(3) {
	grid-column: 2 / span 2;
}

Se le está indicando que ocupe 2 columnas.

grid (como atributo)
--------------------

Se emplea indicando los atributos grid-template-rows y grid-template-columns (en ese orden).

Esto:

.box {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 1fr);
}

equivale a:

.box {
  display: grid;
  grid: repeat(4, 1fr) / repeat(4, 1fr);
}

grid-auto-flow
--------------

Sirve para controlar elementos que se colocan automáticamente en el contenedor Grid.
Toma uno de los siguientes valores:

row:          Valor por defecto. Coloca los ítems llenando cada fila.	
column:       Coloca los ítems llenando cada columna.	
dense:        Coloca los ítems y cubre los espacios en todo el grid.
row dense:    Coloca los ítems llenando cada fila, y cubre los espacios en todo el grid.
column dense: Coloca los ítems llenando cada columna, y cubre los espacios en todo el grid.

Ejemplo:

.box {
  display: grid;
  grid: repeat(4, 1fr) / repeat(4, 1fr);
  grid-auto-flow: dense;
}

Áreas
-----

Usar grid-template-areas sirve para determinar áreas específicas para distribuir cada componente.

CSS:

.item1 { grid-area: header; }
.item2 { grid-area: menu; }
.item3 { grid-area: main; }
.item4 { grid-area: right; }
.item5 { grid-area: footer; }

.grid-container {
  display: grid;
  grid-template-areas:
  'header header header header header header'
  'menu main main main right right'
  'menu footer footer footer footer footer';
  grid-gap: 10px;
  background-color: #2196F3;
  padding: 10px;
}

.grid-container > div {
  background-color: rgba(255, 255, 255, 0.8);
  text-align: center;
  padding: 20px 0;
  font-size: 30px;
}

HTML:

<div class="grid-container">
  <div class="item1">Header</div>
  <div class="item2">Menu</div>
  <div class="item3">Main</div>  
  <div class="item4">Right</div>
  <div class="item5">Footer</div>
</div>

Para colocar un elemento en un área específica determinada previamente por grid-template-areas, se emplea el atributo grid-area:

.grid-container.nth-child(2){
  grid-area: header;
}


grid-template
-------------

Atributo que toma los valores de:

* grid-template-rows
* grid-template-columns
* grid-template-areas

en ese orden.

Ejemplo:

CSS:

.item1 { grid-area: header; }
.item2 { grid-area: menu; }
.item3 { grid-area: main; }
.item4 { grid-area: right; }
.item5 { grid-area: footer; }

.grid-container {
  display: grid;
  grid-template:
    'header header header header header header'
    'menu main main main right right'
    'menu footer footer footer footer footer';
  grid-gap: 10px;
  background-color: #2196F3;
  padding: 10px;
}

.grid-container > div {
  background-color: rgba(255, 255, 255, 0.8);
  text-align: center;
  padding: 20px 0;
  font-size: 30px;

HTML:

<div class="grid-container">
  <div class="item1">Header</div>
  <div class="item2">Menu</div>
  <div class="item3">Main</div>  
  <div class="item4">Right</div>
  <div class="item5">Footer</div>
</div>


Alineación en Grid
------------------

La alineación es solo vertical, dado que horizontalmente ya es definido por el Grid.

Se aplican las propiedades:
* justify-content
* align-items

Las mismas que en Flexbox.

Ambas propiedades son invocadas a través de place-content.

Ejemplo:

display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 2rem;
place-content: center;

El valor de place-content equivale a declarar los atributos:
justify-content: center
align-items: center


gap y calc
==========

gap, column-gap, row-gap
------------------------

Sirven para establecer separación de elementos en un contenedor.
column-gap: separa a nivel de columna.
row-gap: separa a nivel de fila.
gap: separa a nivel de ambos, pudiendo ser un único valor a nivel de fila y columna, o dos valores: uno a nivel de filas y otro a nivel de columnas.

CSS:

.grid-container {
  border: 1px solid black;
  background-color: mintcream;
  display: grid;
  grid-template-columns: auto auto auto;
  gap: 50px;
}
.grid-container > div {
  border: 1px solid black;
  background-color: yellow;
}

HTML:

<div class="grid-container">
  <div>1</div>
  <div>2</div>
  <div>3</div>  
  <div>4</div>
  <div>5</div>
  <div>6</div>
  <div>7</div>  
  <div>8</div>  
</div>

Nota: antiguamente solo se usaba para CSS Grid como grid-gap (y grid-column-gap con grid-row-gap).

calc
----

Es una función calculadora.

width: calc(100% - 2rem);

Gradientes en CSS
=================

background-image: linear-gradient(to top, #dfe9e3 0%, var(--blanco) 100%);

Scroll Snap
===========

Genera paradas en la navegación scroll hacia cierto elemento.

html {
  scroll-snap-type: y proximity; /* ajuste del scroll vertical */
}

/* scroll-snap - secciones donde se detiene el scroll */
.servicios, .navegacion-principal, .formulario, .footer {
    scroll-snap-align: center;
    scroll-snap-stop: always;
}


Metodología BEM (Block Element Modifier)
========================================

Es una metodología para crear CSS reutilizable y ordenado que evita colisión entre nombres (de clases, ids, etcétera).


Reglas del BEM
--------------

Bloques: son contenedores de elementos. Se nombran como clases.
Elementos: son ítems pertenecientes al bloque, nombrados así: .bloque__elemento
Modificadores: son los indicadores de variante de un elemento, nombrados así: .bloque__elemento--modificador


Patrones de diseño web responsivo
=================================

1. 2 columnas iguales con CSS Grid
----------------------------------

Aplicar desde el elemento padre:

@media (min-width: 768px){
    .dos-columnas{
        display: grid;
        /* grid-template-columns: 50% 50%;
        grid-template-columns: 1fr 1fr;
        grid-template-columns: repeat(2, 50%); */
        grid-template-columns: repeat(2, 1fr);
        column-gap: 5rem;
    }
}

2. 2 columnas iguales con Flexbox
---------------------------------

Aplicar:

@media(min-width: 768px){
    .dos-columnas{
        display: flex;
        justify-content: space-between;
    }

    .entrada-blog{
	    /* flex-basis: calc(50% - 1rem); */
        flex: 0 0 calc(50% - 1rem);
    }
}

O:

@media(min-width: 768px){
    .dos-columnas{
        display: flex;
        justify-content: space-between;
		gap: 2rem; /* no está aún soportada en Safari */
    }
}

3. 3 columnas iguales con CSS Grid
----------------------------------

Aplicar en la clase padre:

@media(min-width: 768px){
    .tres-columnas{
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        column-gap: 2rem;
    }
}

4. 3 columnas iguales con Flexbox
---------------------------------

Aplicar en la clase padre:

@media(min-width: 768px){
    .tres-columnas{
        display: flex;
        justify-content: space-between;
    }

    .entrada-blog{
        flex: 0 0 calc(33.3% - 1rem);
    }
}

O:

@media(min-width: 768px){
    .tres-columnas{
        display: flex;
        justify-content: space-between;
		gap: 2rem; /* no está aún soportada en Safari */
    }
}

5. Tres columnas (1 más grande que las otras dos) con CSS Grid
--------------------------------------------------------------

Primer paso: definir las clases:
* contenedor-grid: para el uso de grid
* contenedor-principal: para la columna más grande
* dos columnas aside

Luego, aplicar:

@media(min-width: 768px){
    .contenedor-grid{
        display: grid;
        grid-template-areas: "izquierda contenido derecha";
        grid-template-columns: 1fr 3fr 1fr;
        grid-auto-flow: column;
        column-gap: 2rem;
    }

    .contenido-principal {
        grid-area: contenido;
    }

    .sidebar-1 {
        grid-area: izquierda;
    }
	
	/* sidebar-2 automáticamente va a la derecha */
}


6. Tres columnas (1 más grande que las otras dos) con Flexbox
-------------------------------------------------------------

Primer paso: definir las clases:
* contenedor-grid: para el uso de grid
* contenedor-principal: para la columna más grande
* clase sidebar para las columnas de menor tamaño

Luego, aplicar:

@media (min-width: 768px) {
    .contenedor-flex{
        display: flex;
        justify-content: space-between;
    }

    .contenido-principal {
        flex-basis: calc(60% - 1rem);
    }

    .sidebar {
        flex-basis: calc(20% - 1rem);
    }

    .sidebar-1 {
        order: -1; /* la posición de uno de los sidebars, invertido */
    }
}

7. Column drop (CSS Grid)
-------------------------

Aplicar:


@media (min-width: 480px) {
    .column-drop-css { /* contenedor principal */
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 2rem;
    }
    .primera {
        grid-column: 1 / 3;
        grid-row: 2 / 3;
    }
    .segunda {
        grid-column: 2 / 3;
        grid-row: 1 / 3;
    }
}

@media (min-width: 768px) {
    
    .column-drop-css {
        grid-template-columns: repeat(3, 1fr);
    }
    .primera {
        grid-column: 2 / 3;
        grid-row: unset;
    }
    .segunda {
        grid-column: 3 / 4;
        grid-row: unset;
    }
}


8. Column drop (Flexbox)
------------------------

@media(min-width: 480px){
    .column-drop-flex {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
    }
    .contenido-principal, .primera {
        flex-basis: calc(50% - 1rem);
    }
}

@media(min-width: 768px){
    .contenido-principal, .primera, .segunda {
        flex: 0 0 calc(33.3% - 2rem);
    }
}


9. Con sidebar (CSS Grid)
-------------------------

Aplicar:


@media (min-width: 768px){
    .con-sidebar {
        display: grid;
        grid-template-columns: 3fr 1fr;
        column-gap: 4rem;
        grid-auto-flow: column;
    }

    aside {
        grid-column: 2 / 3;
    }
}


10. Con sidebar (Flexbox)
-------------------------

Aplicar:

@media(min-width: 768px){
    .con-sidebar {
        display: flex;
        gap: 2rem;
    }
    aside {
        flex: 1;
    }
    article {
        flex: 3;
    }
}

11. Layout shifter (CSS Grid)
-----------------------------

Aplicar:


@media(min-width: 768px){
    .layout-shifter {
        display: grid;
        grid-template-areas: "contenido"
                             "inferior";
    }
    .sidebar {
        grid-area: inferior;
    }
    .contenido-principal {
        grid-area: contenido;
        display: grid;
        grid-template-areas: "entrada1 entrada2";
        grid-template-columns: repeat(2, 1fr);
        column-gap: 3rem;
    }
}

@media(min-width: 992px){
    .layout-shifter {
        grid-template-areas: "contenido sidebar";
        column-gap: 2rem;
    }
    .sidebar{
        grid-area: sidebar;
    }
    .contenido-principal {
        grid-area: contenido;
        grid-template-areas: "entrada1"
                             "entrada2";
        grid-template-columns: unset;
    }
}

12. Layout shifter (Flexbox)
-----------------------------

Aplicar:

@media (min-width: 768px) {
    .layout-shifter{
        display: flex;
        flex-direction: column-reverse;
    }
    .contenido-principal {
        display: flex;
        justify-content: space-between;
    }
    .entrada-blog {
        flex: 0 0 calc(50% - 2rem);
    }
}

@media (min-width: 992px) {
    .layout-shifter{
        flex-direction: row;
        justify-content: space-between;
    }
    .contenido-principal {
        flex: 0 0 calc(66.6% - 2rem);
        flex-wrap: wrap;
    }
    .sidebar {
        order: 2;
        flex: 0 0 calc(33.3% - 2rem);
    }
    .entrada-blog {
        flex: 0 0 100%;
    }
}

13. Mostly fluid
----------------

.contenedor {
    width: 95%;
    max-width: 120rem;
    margin: 0 auto;
}

@media(min-width: 768px){
    .contenedor {
        width: 80%;
    }
}

@media(min-width: 992px){
    .contenedor {
        width: 60%;
    }
}
img {
    max-width: 100%;
}


14. Tiny tweaks
---------------

Consiste en ajustes en tamaños de texto en función a la resolución del dispositivo.


h1 {
    text-align: center;
    font-size: 4rem;
}

p {
    font-size: 2rem;
}

@media(min-width: 768px){
    h1 {
        font-size: 6rem;
        text-align: left;
    }
    p {
        font-size: 3rem;
    }
}

Contenedor responsivo
=====================

Generar:

.contenedor {
  max-width: 120rem;
  width: 90%;
  margin: 0 auto;
}

o:

.contenedor {
  width: min(90%, 120rem);
  margin: 0 auto;
}

Performance del sitio
=====================

Lazy loading
------------

Agregar loading="lazy" en los objetos img.

Preload
-------

<link rel="preload" as="style" href="css/styles.css" />

Prefetch
--------

<link rel="prefetch" href="nosotros.html" as="document" />


Lograr div con video en background
==================================


SCSS:

@use "base/variables" as v;
@use "base/mixins" as m;

/* VIDEO DE FONDO */

.video {
  position: relative; /* relativo al body */
  max-height: 70rem;
  min-height: 50rem;
  overflow: hidden; /* oculta el exceso de la dimensión del video */

  .overlay {
    position: absolute; /* absoluto dentro del div de video */
    height: 100%;
    width: 100%;
    /* gradiente: */
    background: rgb(165, 3, 255);
    background: linear-gradient(
      270deg,
      rgba(165, 3, 255, 1) 0%,
      rgba(255, 0, 110, 0.49933476808692223) 100%
    );
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  video {
    /* el objeto de video */
    display: block;
    width: auto;

    @include m.tablet{
        width: 100%; /* toma todo el ancho de pantalla a partir de tablet */
    }
    
  }
}

.contenido-video {
    z-index: 10;

    h2 {
        color: v.$blanco;
        font-size: 7rem;
        margin: 0;
    }

    p {
        background-color: v.$rosa;
        display: inline-block;
        padding: 1rem 2rem;
        color: v.$blanco;
        font-weight: 700;
        font-size: 2.4rem;
    }
}


CSS:

/* VIDEO DE FONDO */
.video {
  position: relative; /* relativo al body */
  max-height: 70rem;
  min-height: 50rem;
  overflow: hidden; /* oculta el exceso de la dimensión del video */
}
.video .overlay {
  position: absolute; /* absoluto dentro del div de video */
  height: 100%;
  width: 100%;
  /* gradiente: */
  background: rgb(165, 3, 255);
  background: linear-gradient(270deg, rgb(165, 3, 255) 0%, rgba(255, 0, 110, 0.4993347681) 100%);
  display: flex;
  flex-direction: column;
  justify-content: center;
}
.video video {
  /* el objeto de video */
  display: block;
  width: auto;
}
@media (min-width: 768px) {
  .video video {
    width: 100%; /* toma todo el ancho de pantalla a partir de tablet */
  }
}

.contenido-video {
  z-index: 10;
}
.contenido-video h2 {
  color: #ffffff;
  font-size: 7rem;
  margin: 0;
}
.contenido-video p {
  background-color: #f53756;
  display: inline-block;
  padding: 1rem 2rem;
  color: #ffffff;
  font-weight: 700;
  font-size: 2.4rem;
}

HTML:

<div class="video">
  <div class="overlay">
    <div class="contenedor contenido-video">
      <h2>Rock & EDM Festival</h2>
      <p>Enero 2023, Guayaquil, Ecuador</p>
    </div>
  </div>
  <video muted autoplay loop>
    <source type="video/mp4" src="video/concierto.mp4" />
    <source type="video/ogg" src="video/concierto.ogg" />
    <source type="video/webm" src="video/concierto.webm" />
  </video>
</div>



Tag <picture>
=============

Agrupa tags img (imágenes) según el formato que puedan soportar (webp, avif, jpg, png, etcétera).

<picture>
  <source srcset="build/img/imagen_vocalista.avif" type="image/avif" /> <!-- Procura cargar esta imagen (si el navegador lo soporta) -->
  <source srcset="build/img/imagen_vocalista.webp" type="image/webp" /> <!-- Procura cargar esta imagen (si el caso anterior falla) -->
  <img src="build/img/imagen_vocalista.jpg" alt="vocalista del festival" /> <!-- Fallback (si todos los casos anteriores fallan) -->
</picture>


Animaciones CSS
===============

Transición
----------
Se define el tipo de efecto, la duración y ralentización para animar el componente deseado.

Transformación
--------------
Se define las acciones que ocurrirán para la transición previamente definida.

Ejemplo:

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<title>Animación</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
</head>

<body>
  <div class="card">
    <h1 class="title">Hola!</h1>
  </div>
</body>
</html>

body{
  padding: 60px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.card {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 300px;
  width:250px;
  border-radius: 10px;
  background-color: red;
  color: white;
  transition: transform 0.3s ease-in-out;/* transición */
}

.card:hover {
  transform: rotate(-4deg) scale(1.2); /* transformación */
}

En este caso, ocurre una rotación de 4 grados a la izquierda y un escalado aumentado 1.2 veces, lo que ocasiona un aumento de tamaño.
Tal animación ocurre en el hover al componente.






