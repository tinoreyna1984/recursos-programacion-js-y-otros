Conceptos clave y distintivos de React JS
=========================================

Propiedades o "props"
---------------------

Es el concepto clave de React. Los props son, simplemente, las propiedades de un componente hecho en React JS, del mismo modo que conocemos los tags de un bloque HTML como, por ejemplo, el de imagen:

<img src=".png" alt="" border="0" align="left" width="" height="" />

En términos de JSX, img sería un componente y los tags src, alt, border, align, width y height serían los props.

Si, por ejemplo, tenemos un componente llamado Persona en JSX (en App.js o donde se llame al componente):

<Persona nombre="Tino" edad=37 />

Los props serían nombre y edad. En la definición de componente sería:

export function Persona(){
	
	return(
		<>
			Nombre: {this.props.nombre} <br/>
			Edad: {this.props.edad}
		</>
	);
	
}

o, más típicamente:

export function Persona(props){
	
	return(
		<>
			Nombre: {props.nombre} <br/>
			Edad: {props.edad}
		</>
	);
	
}

Pueden tener valores por defecto a través de la creación del objeto defaultProps:

Persona.defaultProps = {
	nombre : "Usuario",
	edad : 25,
}

Los props pueden también recibirse como objeto:

Sea:

const persona = {
nombre: "Tino",
edad: 37,
correo: 'tinoreyna1984@gmail.com'
};

Pasamos persona a un componente como este (en App.js o donde se llame al componente):

<Persona persona={persona} />

El componente leerá la persona de la siguiente forma:

export function Persona(props){
	return(
		<>
			Nombre: {props.persona.nombre} <br/>
			Edad: {props.persona.edad} <br/>
			Correo: {props.persona.correo} 
		</>
	);
}

o:

export function Persona(props){

	// la forma más limpia: desestructurando objetos
	{persona} = props;
	{nombre, edad, correo} = persona;
	
	return(
		<>
			Nombre: {nombre} <br/>
			Edad: {edad} <br/>
			Correo: {correo} 
		</>
	);
}

Los props también pueden incluir funciones:

Sea la función declarada en App.js o en otro componente:

const saludoFn = (nombre) => {
	alert("Hola, " + nombre);
};

Sea el componente declarado en App.js o en otro componente:

<Saludo persona={persona} saludoFn={saludoFn} />

El componente sería el siguiente:

export default function Saludo(props) {

  // Notese que las variables las he obtenido con el operador desestructuracion (llaves)

  const { saludoFn, persona } = props;
  const { nombre = 'Usuario' } = persona; // se le puede asignar tambien un valor por defecto de esta forma

  return (
    <>
      <button onClick={() => saludoFn(nombre)}>Saludar</button>
      {/* el componente genera un botón que emplea un callback, aprovechando la función procedente del props */}
    </>
  );
}

Hooks
=====

Referencias:
https://es.reactjs.org/docs/hooks-state.html
https://es.reactjs.org/docs/hooks-effect.html

Son funcionalidades que permiten cambiar dinámica y sencillamente los estados de los props.

Los más típicos son useState y useEffect, los cuales manejan estados y efectos, respectivamente.

Reglas de Hooks:

1. Solo llamar Hooks en el nivel superior. No llames Hooks dentro de loops, condiciones o funciones anidadas.
2. Solo llamar Hooks desde componentes de función de React. No llames Hooks desde las funciones regulares de JavaScript. (Solo hay otro lugar válido para llamar Hooks: tus propios Hooks personalizados. En un momento aprenderemos sobre estos).

Referencia: https://es.reactjs.org/docs/hooks-rules.html

useState:

Ejemplo:

 1:  import React, { useState } from 'react';
 2:
 3:  function Example() {
 4:    const [count, setCount] = useState(0);
 5:
 6:    return (
 7:      <div>
 8:        <p>Hiciste clic {count} veces</p>
 9:        <button onClick={() => setCount(count + 1)}>
10:         Click me
11:        </button>
12:      </div>
13:    );
14:  }

Línea 1: Importamos el Hook useState desde React que nos permite mantener un estado local en un componente de función.

Línea 4: Dentro del componente Example declaramos una nueva variable de estado llamando al Hook useState. Este nos devuelve un par de valores, a los que damos un nombre. Llamamos count a nuestra variable porque guarda el número de clicks en el botón. La inicializamos a cero pasando 0 como único argumento a useState. El segundo elemento retornado es una función que nos permite actualizar count, por lo que le llamamos setCount.

Línea 9: Cuando el usuario hace click, llamamos a setCount con un nuevo valor. React actualizará entonces el componente Example pasándole el nuevo valor de count.

useEffect:

import React, { useState, useEffect } from 'react';

function Example() {
  const [count, setCount] = useState(0);

  // De forma similar a componentDidMount y componentDidUpdate
  useEffect(() => {
    // Actualiza el título del documento usando la API del navegador
    document.title = `Hiciste clic ${count} veces`;
  }, [count]); // el [count] es opcional pero ayuda en determinados casos 

  return (
    <div>
      <p>Hiciste clic {count} veces</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}

Este fragmento está basado en el ejemplo de contador de la página anterior, pero le hemos añadido una funcionalidad nueva: actualizamos el título del documento con un mensaje personalizado que incluye el número de clicks.






