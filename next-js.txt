Next.js
*******

Crear con create-next-app
=========================

npx create-next-app mi-app

Ejecutar en desarrollo:
npm run dev

Crear el build para despliegue en producción:
npm run build

Ejecutar en producción:
npm start

NOTA
----

Si ocurre el error:

"Parsing error: Cannot find module 'next/babel' Require stack..."

Editar ".eslintrc.json" con lo siguiente:

{
  "extends": ["next/babel","next/core-web-vitals"]
}

Bootstrap 5
===========

Instalar:

npm i bootstrap @popperjs/core

Llamarlo en _app.js (dentro de MyApp):

import "bootstrap/dist/css/bootstrap.min.css"; // llama a Bootstrap aquí
import '../styles/globals.css'
import { useEffect } from "react";

function MyApp({ Component, pageProps }) {

  // importación de Bootstrap en Next.js
  useEffect(() => {
    require("bootstrap/dist/js/bootstrap.bundle.min.js");
  }, []);

  return <Component {...pageProps} />
}

export default MyApp

TailwindCSS
===========

Crear proyecto de Next.js (con Typescript) con TailwindCSS
----------------------------------------------------------

Ejecutar:

npx create-next-app --example with-tailwindcss mi-proyecto
o: yarn create next-app --example with-tailwindcss mi-proyecto
o: pnpm create next-app --example with-tailwindcss mi-proyecto


Crear proyecto de Next.js y configurar TailwindCSS manualmente
--------------------------------------------------------------

1. Crear proyecto y acceder al mismo:

npx create-next-app my-project
cd my-project

2. Instalar TailwindCSS y sus componentes asociados en modo desarrollo. Luego, crear los archivos de configuración:

npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

3. Configurar las rutas de template para TailwindCSS editando tailwind.config.js:

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx}",
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

4. Aprovechando styles/globals.css de Next, agregar las directivas en ese archivo reemplazando el contenido por:

@tailwind base;
@tailwind components;
@tailwind utilities;

5. Ejecutar el proyecto:

npm run dev

6. El proyecto ya está listo para ser desarrollado.

Nota para VS Code
-----------------

Si ocurre el mensaje "CSS > Lint: Unknown At Rules" en el paso 4, buscar en Preferencias, filtrar la expresión del error y cambiar la configuración a "ignore".


SASS
====

Instalar: npm i -D sass

Modificar next.config.js: (o ts)

/** @type {import('next').NextConfig} */

const path = require('path'); // agregar

const nextConfig = {
  reactStrictMode: false,
  sassOptions: { // agregar
    includePaths: [path.join(__dirname, 'src/scss')],
  },
}

module.exports = nextConfig

Importar globalmente el archivo único que trabajará con SASS (por ejemplo: app.scss) en _app.js:

import '@/scss/app.scss'


Uso
===

Todo lo conocido de React aplica para Next.js. No requiere librerías de terceros para algunos aspectos avanzados tales como enrutamiento.
Cambios en el sitio: pages/index.js
Creación de nuevas páginas: dentro de pages

Bloques particulares
====================

Head:

import Head from 'next/head';

export default function Home() {
  return (
    <div className="container">
      <Head>
        <link rel="icon" href="/favicon.ico" />
        <meta
          name="description"
          content="Learn how to build a personal website using Next.js"
        />
        <meta
          property="og:image"
          content={`https://og-image.vercel.app/${encodeURI(
            siteTitle
          )}.png?theme=light&md=0&fontSize=75px&images=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Ffront%2Fassets%2Fdesign%2Fnextjs-black-logo.svg`}
        />
        <meta name="og:title" content={siteTitle} />
        <meta name="twitter:card" content="summary_large_image" />
      </Head>
	  ...
	</div>
   );
}

Permite el encabezamiento del sitio, esto es, para definir el título en el browser y los elementos de visualización para el documento HTML, así como también ayudar al SEO.

Link:

import Link from 'next/link';

<Link href="/posts/first-post">this page!</Link>

Reemplaza a <a> para creación de enlaces orientados al cliente.

Para versiones anteriores a Next.js 13:

<Link href="/about" legacyBehavior>
  <a>About Us</a>
</Link>

usar "legacyBehavior" para anidar un elemento <a>.

Definiciones globales
---------------------

Crear en pages el archivo _app.js:

// `pages/_app.js`
import '../styles/global.css';

export default function App({ Component, pageProps }) {
  return <Component {...pageProps} />;
}

Estilizar: crear un directorio al nivel más alto llamado styles y crear un archivo global.css:

html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
  line-height: 1.6;
  font-size: 18px;
}

* {
  box-sizing: border-box;
}

a {
  color: #0070f3;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

img {
  max-width: 100%;
  display: block;
}

Se emplean los estilos como un módulo CSS:

layout.module.css:

.container {
  max-width: 36rem;
  padding: 0 1rem;
  margin: 3rem auto 6rem;
}

layout.js:

import Head from "next/head";
import Image from "next/image";
import styles from "./layout.module.css";
import utilStyles from "../styles/utils.module.css";
import Link from "next/link";

const name = "Tino";
export const siteTitle = "Next.js Sample Website";

export default function Layout({ children, home }) {
  return (
    <div className={styles.container}>
	...
	</div>
  );
}

Pre-renderizado
===============

Es la acción de precarga de páginas de un sitio hecho con Next.js. Next genera código HTML para cada página, lo que significa que el requerimiento de JavaScript sería mínimo. Esto ocurre por defecto en sitios con Next.
Existen dos principales formas de pre-renderizado: generación estática y server-side rendering (renderizado del lado del servidor) o SSR.
El pre-renderizado beneficia al sitio con mejor performance y SEO.

Generación Estática (SSG)
-------------------------

Next genera páginas una vez para ser reutilizadas en cada sesión del usuario.
Es la forma por defecto con la que Next genera las páginas para el sitio una vez desplegado a producción.

SSR
---

Next permite que se cree cada página del sitio por cada request del usuario.
Es la forma más adecuada cuando hay mucha interacción de parte del usuario, lo que obliga al app web a actualizar su contenido.

getStaticProps()
----------------

Esta función debe definirse antes de invocar el componente de página:

export async function getStaticProps(context) {
  return {
    props: {
      // props for your component
    },
  };
}


CSR
---
Client-side rendering. En Next es posible desarrollar una página que renderice solo desde el cliente como pasa en React. Es válido si la página no tiene necesidad de SEO, sea preferentemente privada y se enfoque solo en presentar datos.

En estos casos, Next recomienda usar el hook de React useSWR. Ejemplo:

import useSWR from 'swr';

function Profile() {
  const { data, error } = useSWR('/api/user', fetch);

  if (error) return <div>failed to load</div>;
  if (!data) return <div>loading...</div>;
  return <div>hello {data.name}!</div>;
}

Otro ejemplo:

export default function JobsList() {
  // ...
  const [data, setData] = useState(dummyWorksList);
  const [dept, setDept] = useState("all");

  let filterData = []; // eventually replaced with a useEffect snippet with a fetch

  //console.log(dept)

  const filterWorkHandler = (dept) => {
    setDept(dept);
    if (dept !== 'all') {
      filterData = dummyWorksList.filter((work) => work.dept === dept);
      setData(filterData);
    } else {
      filterData = dummyWorksList;
      setData(dummyWorksList);
    }
  };

  //console.log("data: ", data);
  
  // ...
}


Enrutamiento dinámico
=====================

Generación estática
-------------------

Si se tiene una página que se identifique por un parámetro, tal como:

/conjunto/id

Debe de crearse, dentro de /conjunto, un archivo llamado [id].js, el cual debe tener:
* Un componente React.
* La función getStaticPaths, la cual debe devolver un array de valores según el id.
* La función getStaticProps, la cual busca la data de renderización según el id.

Acceder a un API REST o a una base de datos
-------------------------------------------

export async function getAllPostIds() {
  // Instead of the file system,
  // fetch post data from an external API endpoint
  const res = await fetch('..');
  const posts = await res.json();
  return posts.map((post) => {
    return {
      params: {
        id: post.id,
      },
    };
  });
}

Desarrollo vs producción
------------------------

* En desarrollo, getStaticPaths se ejecuta en cada request.
* En producción, getStaticPaths se ejecuta durante el build.

Fallback
--------

La respuesta de getStaticPaths es la siguiente:

{
  paths,
  fallback: false,
}

Entonces, el flag "fallback" indica lo siguiente:
* fallback === false: si no se regresa ninguna de las rutas de getStaticPaths, se genera una página que informa un error 404.
* fallback === true: 
  - Las rutas devueltas por getStaticPaths serán renderizadas en HTML en el build.
  - No se generará una página de error 404, sino que Next.js generará una página de versión fallback para el primer request del enlace en cuestión.
  - Se generará una página estática de la ruta solicitada para todo request que apunte a dicha ruta.
* fallback === blocking: las nuevas rutas serán servidas con getStaticProps y cacheadas para requests sucesivos a la misma dirección.


Rutas API
=========

* Crear un directorio api en pages (pages/api):
* Crear un archivo de endpoints en esa ruta, por ejemplo hello.js:

export default function handler(req, res) {
  res.status(200).json({ text: 'Hello' });
}

El objeto de respuesta se verá en http://localhost:3000/api/hello

Consideraciones
---------------

* No buscar (fetch) una ruta API desde getStaticPaths o getStaticProps. Ambos métodos operan desde el servidor para el pre-renderizado, de modo que el browser no dependa mucho de JavaScript.
* Las rutas API pueden ser dinámicas.
* El enrutamiento API permite un uso de vista previa. 


Sitio multi-idioma (SSR)
========================

Instalar y configurar next-intl: https://next-intl-docs.vercel.app/


Sitio multi-idioma (estático)
=============================

1. Instalar next-export-i18n

npm i next-export-i18n

2. Asegurarse de tener configurado el export en package.json (scripts):

"build": "next build && next export"

3. Crear, en la raíz del proyecto, la carpeta i18n. Esta debe contener:

* un archivo index.js, el cual contiene lo siguiente:

var en = require("./translations.en.json");
/* Los demás idiomas, por ejemplo: var es = require("./translations.es.json") */

const i18n = {
  translations: {
    en: en.i18n,
    /* los demás idiomas, por ejemplo: es: es.i18n */
  },
  defaultLang: "en",
  useBrowserDefault: false,
};

module.exports = i18n;

* los archivos importados en index.js, por ejemplo:

translations.en.json:

{
  "i18n": {
    "ui": {
      "languageSwitcher": "ESPAÑOL"
    },
    "navbar": {
      "index": {
        "text": "ABOUT",
        "route": "/"
      }
	  /* cualquier otro elemento del navbar */
	/* cualquier otra sección */
  }
}

translations.es.json:

{
  "i18n": {
    "ui": {
      "languageSwitcher": "ENGLISH"
    },
    "navbar": {
      "index": {
        "text": "ACERCA",
        "route": "/"
      }
	  /* cualquier otro elemento del navbar */
	/* cualquier otra sección */
  }
}

4. En los archivos a ser versionados por idioma, importar:

import { useTranslation, useLanguageQuery,  LanguageSwitcher } from "next-export-i18n";

* LanguageSwitcher es opcional. Es un enlace de cambio de idiomas, muy útil, pero no requerido para la versión si se cuenta con switcher propio.

5. En el componente a traducir, usar:

const { t } = useTranslation();
const [query] = useLanguageQuery();

t: es el traductor
query: es el objeto de los idiomas que se pueden consultar. A través del atributo "lang", se puede ver en qué idioma se está renderizando el sitio, por ejemplo: query.lang === 'es' (español)

6. Si verificamos la traducción para, por ejemplo, {t("navbar.index.text")}, en español saldría "ACERCA" y en inglés "ABOUT".


Prevenir el error "Error: Text content does not match server-rendered HTML"
===========================================================================

Agregar "suppressHydrationWarning" como atributo al elemento que genera el error (no abusar de esta técnica).


SEO
===

En Next.js es posible adecuar el SEO con:

- Uso de tags meta (metadata), robots y mapas de sitio XML.
- Estrategias de renderizado, comentadas en secciones anteriores: SSG, SSR, ISG (generación incremental del sitio) y CSR. Solo las tres primeras ayudan al SEO.
- Todos los conceptos del Marketing Digital referidos al SEO, tales como los headings (h1, h2,..., h6), links internos, etcétera.

Analíticas de sitios en Vercel: https://nextjs.org/analytics


Redux Toolkit en Next.js
========================

Se aplican los mismos conceptos que en React puro, solo que se tiene especial atención a la característica del SSR.

Instalar: npm i @reduxjs/toolkit react-redux next-redux-wrapper


Usar normalize.css
==================

Instalar: npm i normalize.css

En _app.js:

import 'normalize.css/normalize.css';









