Primeras instalaciones
======================

* Google Chrome o similar
* React Developer Tools
* Redux Devtools
* Visual Studio Code
* Postman
* Mongo Compass
* Git
* Node.js

Preparación de VS Code
======================

En VS Code, instalar las extensiones:

* Night Owl
* Bracket Pair Colorizer (logo circular)
* ES7 + React/Redux/GraphQL/React-native snippets
* Intellisense for CSS class names in HTML
* Material Icon Theme
* Path Intellisense
* Lorem ipsum (textos de prueba)

Configuración del Material Icon Theme
-------------------------------------

Menú Ver -> Paleta de comandos -> settings.json:

Agregar o modificar:

"material-icon-theme.activeIconPack": "react_redux",
"material-icon-theme.folders.associations": {

    "redux" : "redux-actions",
    "slices" : "redux-reducer",
    "react-ts" : "react-components",
},

Instalación de React JS
=======================

Para hacer la instalación de ReactJS vamos a seguir estos sencillos pasos:

Paso 1. Instalar NodeJS en su ultima versión, para eso entraremos a su web oficial y descargaremos el instalador más actualizado https://nodejs.org/es/

Paso 2. Actualizar NPM, el gestor de paquetes de node, para bajarnos las dependencias más actuales:

npm i -g npm@latest

Paso 3. Borrar la cache de NPM:

npm cache clean --force

Si salen las llamadas vulnerabilidades, ejecutar:

npm audit fix --force

NOTA: actualizar el tar en caso de que salga warning de deprecación:

npm i -g tar@latest

NOTA: para actualizar React, usar el siguiente comando:

npm i -g react react-dom

NOTA: instalar NodeJS y npm en Linux (en este caso, Ubuntu)
-----------------------------------------------------------

Ejecutar los comandos:

NodeJS (v18):

curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt-get install -y nodejs
sudo npm install -g npm@latest # actualiza npm
node -v
npm -v



Crear proyecto en React JS - CRA
================================

Para generar un nuevo proyecto de React.js y finalmente instalarlo, entraremos al directorio donde queramos generar el proyecto de reactjs y ejecutamos este comando:

npx create-react-app NombreDeMiProyecto

o:

npm init react-app NombreDeMiProyecto

Ahora entraremos al directorio de nuestro proyecto y lanzaremos el servidor local de pruebas para React:

cd NombreDeMiProyecto
npm start

Puedes comprobar la versión de React que tienes dentro del fichero package.json.

Ahora tendremos disponible la webapp de React en http://localhost:3000/ y veremos nuestro proyecto corriendo, con la página de bienvenida por defecto.

Con esto ya sabemos como instalar React desde cero y como generar un proyecto base.

NOTA: si al crear un proyecto del React aparece el siguiente error por dependencia de testing:

Installing template dependencies using npm...
npm ERR! code ERESOLVE
npm ERR! ERESOLVE unable to resolve dependency tree
npm ERR!
npm ERR! While resolving: 05-hook-app@0.1.0
npm ERR! Found: react@18.0.0
npm ERR! node_modules/react
npm ERR!   react@"^18.0.0" from the root project
npm ERR!
npm ERR! Could not resolve dependency:
npm ERR! peer react@"<18.0.0" from @testing-library/react@12.1.5
npm ERR!   @testing-library/react@"^12.0.0" from the root project
npm ERR!
npm ERR! Fix the upstream dependency conflict, or retry
npm ERR! this command with --force, or --legacy-peer-deps
npm ERR! to accept an incorrect (and potentially broken) dependency resolution.
npm ERR!
npm ERR! See C:\Users\Tino\AppData\Local\npm-cache\eresolve-report.txt for a full report.

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\Tino\AppData\Local\npm-cache\_logs\2022-04-12T05_36_29_482Z-debug-0.log
`npm install --no-audit --save @testing-library/jest-dom@^5.14.1 @testing-library/react@^12.0.0 @testing-library/user-event@^13.2.1 web-vitals@^2.1.0` failed

Aplicar (de forma global):

npm config set legacy-peer-deps true

Crear una PWA con React
-----------------------

Emplear: npx create-react-app mi_proyecto --template cra-template-pwa

Crear un proyecto React con Redux
---------------------------------

Emplear: npx create-react-app my-app --template redux

Crear una PWA con React y Redux
-------------------------------

Emplear: npx create-react-app my-app --template redux-pwa

Crear proyecto en React JS - Vite
=================================

Emplear: npm create vite

Genera la siguiente salida verbosa:

√ Project name: ... vite-prueba <- ingresar nombre de proyecto
√ Select a framework: » react <- seleccionar React
√ Select a variant: » react <- seleccionar react (la variante puede ser con Typescript)

Scaffolding project in E:\JavaScript\react\vite-prueba...

Done. Now run:

  cd vite-prueba
  npm install
  npm run dev

El proyecto queda listo. Ejecutar los comandos indicados en la salida.

Las instalaciones de paquetes son iguales que en un proyecto creado con create-react-app.

Diferencias con CRA
-------------------

- Los archivos de componentes deben tener la extensión .jsx o .tsx.
- La carga es más rápida que en CRA, ya que no reconstruye todos los cambios del proyecto, sino solo adiciona los que se hayan creado o modificado progresivamente.

Generar el build con Vite
-------------------------

npm run build

Genera el build en una carpeta con nombre "dist".

Crear proyecto React con Vite en una línea
------------------------------------------

Emplear:

npm create vite mi-app-react --template react (React con JavaScript)
npm create vite mi-app-react-ts --template react-ts (React con Typescript)

Otras consideraciones de Vite
-----------------------------

Configurar en vite.config.js:

  esbuild: {
    logOverride: { 'this-is-undefined-in-esm': 'silent' }
  }

Edición del sitio en ReactJS
============================

La centralidad del proyecto está en el archivo App.js en su raíz.

Agregar otras extensiones
=========================

React Router
------------

Instalación:

npm install react-router-dom

Bootstrap CDN
-------------

Ir a: https://getbootstrap.com/docs/5.2/getting-started/download/ y buscar CDN. Emplear los bloques link y script y pegarlos encima del título en index.html.

Bootstrap + PopperJS
--------------------

Instalación:

npm i bootstrap@5.2.0-beta1 @popperjs/core

Configuración:

* En index.js (o main.jsx):

import * as bootstrap from 'bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';

* En App.js:

Asegurarse de que esté la siguiente línea al inicio del fichero:

import React from 'react';

React International
-------------------

Instalación:

npm i react-intl

Uso con context: https://www.youtube.com/watch?v=OueflnXmo1U

React Bootstrap
---------------

Instalación:

npm install react-bootstrap bootstrap

Configuración:

* En index.js:

import 'bootstrap/dist/css/bootstrap.min.css';

Font Awesome
============

Instalación:

npm i --save @fortawesome/fontawesome-svg-core  @fortawesome/free-solid-svg-icons @fortawesome/react-fontawesome @fortawesome/free-brands-svg-icons

Uso:

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

Scroll-to-top (botón para regresar a parte superior)
====================================================

Instalación:

npm i react-scroll-to-top

Uso (ejemplo):

import ScrollToTop from "react-scroll-to-top";
...
<ScrollToTop smooth />
Para personalizarlo, revisar: https://www.npmjs.com/package/react-scroll-to-top


Uso de Git
==========

Comandos:

Config. de usuario:
git config --global user.name "Tino Reyna"
git config --global user.email "tinoreyna1984@gmail.com"

Verificar estado de archivos:
git status

Agregar archivos:
git add <archivo o archivos específicos>
git add . # agrega todos

Guardar en branch local:
git commit -m "Mensaje de cambio"

Crear repositorio en Github.

Enviar al repositorio creado en Github:
git remote add origin https://github.com/usuario/<nuevo-repo>.git
Y después:
git push origin master

Para cambios desde PC, actualizar rama remota:
git push origin master

Para actualizar desde repositorio (traer cambios a escritorio):
git pull origin master

Para cambiar de repositorio remoto:
git remote set-url origin https://github.com/usuario/<nuevo-repo>.git

Deshacer todos los cambios en un proyecto:
git reset --hard

Para proyectos en Vite
----------------------

Crear un archivo README.md en la raíz del proyecto.

Crear repositorio en Github.

Aplicar las siguientes líneas al proyecto:

git init
git add .
git commit -m "first commit"
git branch -M master
git remote add origin https://github.com/tinoreyna1984/<repo-proyecto-vite>.git
git push -u origin master

El proyecto queda registrado en GitHub.

Subir proyecto a Heroku (solo React JS)
======================================

Link: https://www.youtube.com/watch?v=gItqzShex5M

heroku login
heroku create -b https://github.com/mars/create-react-app-buildpack.git <proyecto de Heroku>
git add .
git commit -m "Commit"
git push heroku master
heroku open

Subir a Heroku:
===============

heroku login

Si no se ha creado en GitHub:

heroku create -b https://github.com/mars/create-react-app-buildpack.git <proyecto de Heroku>
git add .
git commit -m "Commit"
git push heroku master
heroku open

Si fue creado previamente en GitHub:

heroku git:remote -a <repositorio-github>

Subir a hosting compartido (solo frontend):
===========================================

Editar package.json con la siguiente línea después de dependencies:

"homepage" : "https://tinexlab.com/",

Ejecutar:

npm run build

Mover los archivos del build al public_html.

Nota: usar un .htaccess adicional para asegurar el ruteo.

Linea de tiempo vertical
========================

Instalación:

npm i react-vertical-timeline-component

Uso:

import { VerticalTimeline, VerticalTimelineElement }  from 'react-vertical-timeline-component';
import 'react-vertical-timeline-component/style.min.css';

Material UI
===========

Instalación:

npm install @mui/material @emotion/react @emotion/styled

Instalación de íconos (opcional):

npm install @mui/icons-material

Configuración en index.html:

<link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
/>
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/icon?family=Material+Icons"
/>

VS Code:

Material-UI Snippets

React Modal
===========

Instalación:

npm i react-modal

Firebase
========

En React:

npm i firebase

La última versión estable es la 8.10.0:

npm i firebase@8.10.0

Para los proyectos:

Ir a: https://firebase.google.com/

Ir a la consola.
Crear proyecto.
Continuar.

Crear autenticación:
Authentication
Escoger Google y correo + contraseña

auth0
=====

Instalar:

npm i @auth0/auth0-react

react-responsive-carousel
=========================

Instalar:

npm i react-responsive-carousel

Axios
=====

Instalar:

npm i axios

Redux Toolkit
=============

Instalar:

npm install @reduxjs/toolkit react-redux

React Big Calendar
==================

Instalar:

npm i react-big-calendar

Desinstalación de paquete
=========================

npm uninstall <paquete>




