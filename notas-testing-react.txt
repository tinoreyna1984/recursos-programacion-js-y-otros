Pruebas en React
****************
****************

Proyecto de ejemplo: CounterApp

Pruebas
*******

- Unitarias.
- De integración.

Características de las pruebas:

1. Fáciles de escribir.
2. Fáciles de leer.
3. Confiables.
4. Rápidas.
5. Principalmente unitarias.

Proceso AAA
***********

Arrange, Act, Assert: arreglar, actuar, afirmar.

Arrange: estado inicial, sujeto a probar.
Act: aplicar acciones al sujeto de prueba.
Assert: observar el comportamiento resultante de la prueba.

Configuración de pruebas con Vite
=================================

Emplear:
npm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react
npm install --save-dev @testing-library/react @types/jest jest-environment-jsdom

Agregar en scripts dentro de package.json:

"test": "jest --watchAll"

El flag watchAll significa que lee automáticamente los cambios en el código de pruebas, sin necesidad de reiniciarlas.

Crear un archivo babel.config.js en la raíz del proyecto con el contenido:

module.exports = {
    presets: [
        [ '@babel/preset-env', { targets: { esmodules: true } } ],
        [ '@babel/preset-react', { runtime: 'automatic' } ],
    ],
};

Para Node.js con versiones menores a la 18 (pruebas asíncronas con fetch y async-await)
---------------------------------------------------------------------------------------

- Instalar:
npm i --save-dev cross-fetch

- Crear y configurar, también en la raíz del proyecto, el archivo jest.config.js con el siguiente contenido:

module.exports = {
  testEnvironment: 'jest-environment-jsdom',
  setupFiles: ['./jest.setup.js'],
}

- Crear y configurar, también en la raíz del proyecto, el archivo jest.setup.js con el siguiente contenido:

import 'cross-fetch/polyfill';

Esto es emplear un polyfill para usar el fetch API que no existe normalmente en Node.js.

Procedimiento básico en el curso
================================

*. Levantar CounterApp.
*. Copiar carpeta de pruebas (base) en src.

Primera prueba:

* Crear en src un directorio de pruebas: src/test
En ella, crear un archivo de prueba inicial: demo.test.js
Poner como contenido el comando test propio de Jest (incluido en React JS):

test(<mensaje referido a la prueba>, <callback a probar>)

Ej:

test('debe funcionar', () => { console.log("Hola mundo") });

Ejecutar desde la raíz del proyecto el comando:

npm run test

En general, los archivos a probar tienen como nombre los archivos de componentes o similares en JS o JSX, con la extensión .test.js. (o jsx)

Jest
====

Las pruebas de Jest cubren lo siguiente:

test('Mensaje de reconocimiento', () => { 
    /*
	1. Inicialización.
	2. Estímulo.	
	3. Observar el comportamiento esperado.
	*/
})


Ejemplo:

test('Esta prueba no debe fallar', () => {
    // 1. Inicialización
    const message1 = 'Hola mundo';
    // 2. Estímulo
    const message2 = message1.trim();
    // 3. Observar el resultado esperado
    expect(message1).toBe(message2);
})

Pruebas de archivos
===================

- Las carpetas src y test deben estar al mismo nivel.
- El contenido en src y test debe ser paralelo, esto es, las subcarpetas con el mismo nombre y al mismo nivel y los archivos renombrados con la extensión .test.js o .test.jsx.


Métodos importantes
===================

toBe: el que ya se probó anteriormente.

toEqual:

describe("Pruebas en 05-funciones", () => {
  test("getUser debe retornar un objeto", () => {
    const userTest = {
      uid: "ABC123",
      username: "El_Papi1502",
    };
    const user = getUser();
    expect(user).toEqual(userTest);
  });
});

Este método compara objetos.

Pruebas asíncronas: promesas
----------------------------

En este tipo de pruebas se emplea el argumento done, que es un callback. Las pruebas son, por defecto, síncronas, entonces el argumento done ayuda a que se compute todo el proceso asíncrono que se invoca.

describe("Pruebas en 09-promesas", () => {
  test("getHeroeByIdAsync debe retornar un heroe por ID", (done) => {
    const id = 1;
    getHeroeByIdAsync(id).then((heroe) => {
      expect(heroe).toEqual({
        id: 1,
        name: "Batman",
        owner: "DC",
      });
      done();
    });
  });
});

Pruebas con componentes - React Testing Library
===============================================

Instalar RTL:

npm install --save-dev @testing-library/react

Procedimiento:

Crear, al mismo nivel del componente, el archivo de pruebas con extensión .test.jsx. Por ejemplo, para src/CounterApp.jsx debe haber un test/CounterApp.test.jsx. Definirlo como sigue:

import { render, screen } from '@testing-library/react';
import { CounterApp } from "../src/CounterApp";

describe("Pruebas en CounterApp", () => {

  /**
   * Prueba 1: Comprobar que el valor del contador es el valor inicial
   */

  // valor de entrada
  const initialValue = 10;
  test("El componente debe hacer match con el snapshot", () => {
    // obtengo el valor contenedor del componente
    const {container} = render(<CounterApp value={initialValue} />);
    // comparo el valor contenedor con el snapshot
    expect(container).toMatchSnapshot();
  });

  /**
   * Prueba 2: CounterApp debe mostrar el valor de 100
   */
  test("El componente debe mostrar el valor de 100", () => {
    render(<CounterApp value={100} />);
    expect(screen.getByText("100")).toBeTruthy();
  });

});

Si las pruebas pasan, se verá en la consola. En la ejecución de pruebas se genera el snapshot del componente, el cual es una cadena que representa al mismo con HTML puro. Este es guardado con la extensión .test.jsx.snap en el directorio test/__snapshots__ para su comparación.

Evento click
------------

test("El componente debe incrementar el valor del contador", () => {
  render(<CounterApp value={initialValue} />);
  fireEvent.click(screen.getByText("+"));
  expect(screen.getByText("11")).toBeTruthy();
});

Pruebas de componentes - validar props
--------------------------------------

describe("Pruebas en GifItem", () => {
  const image = {
    url: "https://media1.giphy.com/media/3o7btLwXyvzqgXQq2U/giphy.gif",
    title: "Gif de prueba",
  };

  test("El objeto de imagen debe coincidir con el snapshot", () => {
    const { container } = render(<GifItem image={image} />);
    screen.debug();
    expect(container).toMatchSnapshot();
  });

  test("El objeto de imagen debe ingresar obligatoriamente", () => {
    render(<GifItem image={image} />);
    expect(screen.getByAltText("Gif de prueba")).toBeTruthy();
  });

  test("Los valores de src y alt deben ser los adecuados", () => {
    render(<GifItem image={image} />);
    const {src, alt} = screen.getByRole("img");
    expect(src).toBe(image.url);
    expect(alt).toBe(image.title);
  });
});

Pruebas de componentes - Jest functions y pruebas de input, submit y otros casos afines
---------------------------------------------------------------------------------------

describe("Pruebas en AddCategory", () => {
  test("Probar cambiar el valor en el input", () => {
    render(<AddCategory addCategory={() => {}} />);
    screen.debug();
    const input = screen.getByRole("textbox");
    fireEvent.change(input, { target: { value: "Gifs" } });
    expect(input.value).toBe("Gifs");
  });
  test("Probar submit y llamada de addCategory", () => {
    const inputValue = 'Goku';
    const addCategory = jest.fn();
    render(<AddCategory addCategory={addCategory} />);
    const input = screen.getByRole("textbox");
    const form = screen.getByRole("form");
    fireEvent.change(input, { target: { value: inputValue } });
    fireEvent.submit(form);
    //screen.debug();
    expect(addCategory).toHaveBeenCalled();
    expect(addCategory).toHaveBeenCalledWith(inputValue);
  });
  test("no debe llamar a addCategory si el input está vacío", () => {
    const addCategory = jest.fn();
    render(<AddCategory addCategory={addCategory} />);
    const form = screen.getByRole("form");
    fireEvent.submit(form);
    expect(addCategory).not.toHaveBeenCalled();
  });
});


Pruebas de funciones - similar al procedimiento básico
------------------------------------------------------

describe("Pruebas en getGifs", () => {
  test("getGifs debe retornar un arreglo de gifs", async () => {
    const gifs = await getGifs('One Punch');
    expect(gifs.length).toBe(10);
  });
  test("Los valores del primer gif de hide the pain Harold deben ser correctos", async () => {
    const gifs = await getGifs('hide the pain harold');
    const {id, title, url} = gifs[0];
    expect(url).toBe('https://media0.giphy.com/media/d5Fbtoj47ROk0J9IgW/giphy-downsized-medium.gif?cid=1414507ahvdf3f2nk2q0fh9pz5g3eu4x1tqj9r80oynqix0s&rid=giphy-downsized-medium.gif&ct=g');
    expect(title).toBe('Surprise Smile GIF by Hide The Pain Harold');
    expect(id).toBe('d5Fbtoj47ROk0J9IgW');
  });
});

Pruebas de hooks y custom hooks
-------------------------------








